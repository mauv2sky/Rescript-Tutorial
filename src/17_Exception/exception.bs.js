// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var Caml_js_exceptions = require("bs-platform/lib/js/caml_js_exceptions.js");

function numInArray(items) {
  return true;
}

function getItem(items) {
  return 1;
}

var result;

try {
  result = 1;
}
catch (raw_exn){
  var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
  if (exn.RE_EXN_ID === "Not_found") {
    result = 0;
  } else {
    throw exn;
  }
}

var myItems = {
  hd: 1,
  tl: {
    hd: 2,
    tl: {
      hd: 3,
      tl: /* [] */0
    }
  }
};

var exit = 0;

var item;

try {
  item = List.find((function (i) {
          return i === 1;
        }), myItems);
  exit = 1;
}
catch (raw_exn$1){
  var exn$1 = Caml_js_exceptions.internalToOCamlException(raw_exn$1);
  if (exn$1.RE_EXN_ID === "Not_found") {
    console.log("No such item found!");
  } else {
    throw exn$1;
  }
}

if (exit === 1) {
  console.log(item);
}

var InputClosed = Caml_exceptions.create("Exception.InputClosed");

throw {
      RE_EXN_ID: InputClosed,
      _1: "The stream has closed!",
      Error: new Error()
    };

exports.numInArray = numInArray;
exports.getItem = getItem;
exports.result = result;
exports.theItem = theItem;
exports.myItems = myItems;
exports.InputClosed = InputClosed;
exports.BadArgument = BadArgument;
exports.myTest = myTest;
/* result Not a pure module */
